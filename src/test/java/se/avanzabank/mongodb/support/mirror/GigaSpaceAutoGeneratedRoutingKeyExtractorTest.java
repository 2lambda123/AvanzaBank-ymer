package se.avanzabank.mongodb.support.mirror;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import com.gigaspaces.annotation.pojo.SpaceClass;
import com.gigaspaces.annotation.pojo.SpaceId;


public class GigaSpaceAutoGeneratedRoutingKeyExtractorTest {

	@SpaceClass
	private static class TestWithAutoGenerateClass {
		private String id;
		
		public TestWithAutoGenerateClass() {
			// for gigaspaces
		}
		
		public TestWithAutoGenerateClass(String id) {
			this.id = id;
		}

		@SpaceId(autoGenerate = true)
		public String getId() {
			return id;
		}

		public void setId(String id) {
			this.id = id;
		}
	}
	
	@SpaceClass
	private static class TestWithoutAutoGenerateClass {
		private String id;
		
		public TestWithoutAutoGenerateClass() {
			// for gigaspaces
		}
		
		public TestWithoutAutoGenerateClass(String id) {
			this.id = id;
		}
		
		@SpaceId(autoGenerate = false)
		public String getId() {
			return id;
		}
		
		public void setId(String id) {
			this.id = id;
		}
	}
	
	@Test
	public void isApplicable() throws Exception {
		assertTrue(GigaSpaceAutoGeneratedRoutingKeyExtractor.isApplicable(TestWithAutoGenerateClass.class.getMethod("getId")));
		assertFalse(GigaSpaceAutoGeneratedRoutingKeyExtractor.isApplicable(TestWithoutAutoGenerateClass.class.getMethod("getId")));
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void throwsIllegalArgumentExceptionWhenNotApplicable() throws Exception {
		new GigaSpaceAutoGeneratedRoutingKeyExtractor(TestWithoutAutoGenerateClass.class.getMethod("getId"));
	}
	
	@Test
	public void extractId() throws Exception {
		assertEquals("A3", new GigaSpaceAutoGeneratedRoutingKeyExtractor(TestWithAutoGenerateClass.class.getMethod("getId")).getRoutingKey(new TestWithAutoGenerateClass("A3^24324234324324^434")));
		assertEquals("A13", new GigaSpaceAutoGeneratedRoutingKeyExtractor(TestWithAutoGenerateClass.class.getMethod("getId")).getRoutingKey(new TestWithAutoGenerateClass("A13^24324234324324^434")));
	}
	
}
